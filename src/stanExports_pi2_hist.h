// Generated by rstantools.  Do not edit by hand.

/*
    pisquared is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pisquared is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pisquared.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_pi2_hist_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_pi2_hist");
    reader.add_event(36, 34, "end", "model_pi2_hist");
    return reader;
}

#include <stan_meta_header.hpp>
 class model_pi2_hist : public prob_grad {
private:
        int N;
        vector_d pvalues;
        matrix_d weights;
        std::vector<double> alpha_prior;
        std::vector<double> beta_prior;
        int beta_fixed;
public:
    model_pi2_hist(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_pi2_hist(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_pi2_hist_namespace::model_pi2_hist";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);

            current_statement_begin__ = 3;
            validate_non_negative_index("pvalues", "N", N);
            context__.validate_dims("data initialization", "pvalues", "vector_d", context__.to_vec(N));
            pvalues = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("pvalues");
            pos__ = 0;
            size_t pvalues_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < pvalues_j_1_max__; ++j_1__) {
                pvalues(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 4;
            validate_non_negative_index("weights", "N", N);
            validate_non_negative_index("weights", "N", N);
            context__.validate_dims("data initialization", "weights", "matrix_d", context__.to_vec(N,N));
            weights = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("weights");
            pos__ = 0;
            size_t weights_j_2_max__ = N;
            size_t weights_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < weights_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < weights_j_1_max__; ++j_1__) {
                    weights(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 5;
            validate_non_negative_index("alpha_prior", "2", 2);
            context__.validate_dims("data initialization", "alpha_prior", "double", context__.to_vec(2));
            alpha_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("alpha_prior");
            pos__ = 0;
            size_t alpha_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < alpha_prior_k_0_max__; ++k_0__) {
                alpha_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 6;
            validate_non_negative_index("beta_prior", "2", 2);
            context__.validate_dims("data initialization", "beta_prior", "double", context__.to_vec(2));
            beta_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("beta_prior");
            pos__ = 0;
            size_t beta_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < beta_prior_k_0_max__; ++k_0__) {
                beta_prior[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "beta_fixed", "int", context__.to_vec());
            beta_fixed = int(0);
            vals_i__ = context__.vals_i("beta_fixed");
            pos__ = 0;
            beta_fixed = vals_i__[pos__++];
            check_greater_or_equal(function__, "beta_fixed", beta_fixed, 0);
            check_less_or_equal(function__, "beta_fixed", beta_fixed, 1);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 10;
            validate_non_negative_index("pi_array", "4", 4);
            num_params_r__ += (4 - 1);
            current_statement_begin__ = 11;
            validate_non_negative_index("alpha", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 12;
            validate_non_negative_index("beta_minus_one", "(beta_fixed ? 0 : 2 )", (beta_fixed ? 0 : 2 ));
            num_params_r__ += (1 * (beta_fixed ? 0 : 2 ));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_pi2_hist() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 10;
        if (!(context__.contains_r("pi_array")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pi_array missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pi_array");
        pos__ = 0U;
        validate_non_negative_index("pi_array", "4", 4);
        context__.validate_dims("parameter initialization", "pi_array", "vector_d", context__.to_vec(4));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pi_array(4);
        size_t pi_array_j_1_max__ = 4;
        for (size_t j_1__ = 0; j_1__ < pi_array_j_1_max__; ++j_1__) {
            pi_array(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(pi_array);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pi_array: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 11;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "2", 2);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(2));
        std::vector<double> alpha(2, double(0));
        size_t alpha_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 12;
        if (!(context__.contains_r("beta_minus_one")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_minus_one missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_minus_one");
        pos__ = 0U;
        validate_non_negative_index("beta_minus_one", "(beta_fixed ? 0 : 2 )", (beta_fixed ? 0 : 2 ));
        context__.validate_dims("parameter initialization", "beta_minus_one", "double", context__.to_vec((beta_fixed ? 0 : 2 )));
        std::vector<double> beta_minus_one((beta_fixed ? 0 : 2 ), double(0));
        size_t beta_minus_one_k_0_max__ = (beta_fixed ? 0 : 2 );
        for (size_t k_0__ = 0; k_0__ < beta_minus_one_k_0_max__; ++k_0__) {
            beta_minus_one[k_0__] = vals_r__[pos__++];
        }
        size_t beta_minus_one_i_0_max__ = (beta_fixed ? 0 : 2 );
        for (size_t i_0__ = 0; i_0__ < beta_minus_one_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, beta_minus_one[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_minus_one: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 10;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi_array;
            (void) pi_array;  // dummy to suppress unused var warning
            if (jacobian__)
                pi_array = in__.simplex_constrain(4, lp__);
            else
                pi_array = in__.simplex_constrain(4);

            current_statement_begin__ = 11;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = 2;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    alpha.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 12;
            std::vector<local_scalar_t__> beta_minus_one;
            size_t beta_minus_one_d_0_max__ = (beta_fixed ? 0 : 2 );
            beta_minus_one.reserve(beta_minus_one_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < beta_minus_one_d_0_max__; ++d_0__) {
                if (jacobian__)
                    beta_minus_one.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    beta_minus_one.push_back(in__.scalar_lb_constrain(0));
            }

            // transformed parameters
            current_statement_begin__ = 15;
            validate_non_negative_index("beta", "2", 2);
            std::vector<local_scalar_t__> beta(2, local_scalar_t__(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 16;
            for (int i = 1; i <= 2; ++i) {
                current_statement_begin__ = 17;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (beta_fixed ? stan::math::promote_scalar<local_scalar_t__>(1.0) : stan::math::promote_scalar<local_scalar_t__>((get_base1(beta_minus_one, i, "beta_minus_one", 1) + 1.0)) ), 
                            "assigning variable beta");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 15;
            size_t beta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(beta[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body
            {
            current_statement_begin__ = 20;
            validate_non_negative_index("summands", "N", N);
            validate_non_negative_index("summands", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> summands(N, N);
            stan::math::initialize(summands, DUMMY_VAR__);
            stan::math::fill(summands, DUMMY_VAR__);


            current_statement_begin__ = 21;
            lp_accum__.add(beta_log<propto__>(alpha, get_base1(alpha_prior, 1, "alpha_prior", 1), get_base1(alpha_prior, 2, "alpha_prior", 1)));
            current_statement_begin__ = 22;
            if (as_bool(logical_gt(get_base1(beta_prior, 2, "beta_prior", 1), 0))) {
                current_statement_begin__ = 22;
                lp_accum__.add(gamma_log<propto__>(beta_minus_one, get_base1(beta_prior, 1, "beta_prior", 1), get_base1(beta_prior, 2, "beta_prior", 1)));
            }
            current_statement_begin__ = 23;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 24;
                for (int j = 1; j <= N; ++j) {
                    {
                    current_statement_begin__ = 25;
                    validate_non_negative_index("temp", "4", 4);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(4);
                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp, DUMMY_VAR__);


                    current_statement_begin__ = 26;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(pi_array, 1, "pi_array", 1)) + beta_log(get_base1(pvalues, i, "pvalues", 1), 1, 1)) + beta_log(get_base1(pvalues, j, "pvalues", 1), 1, 1)), 
                                "assigning variable temp");
                    current_statement_begin__ = 27;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(pi_array, 2, "pi_array", 1)) + beta_log(get_base1(pvalues, i, "pvalues", 1), get_base1(alpha, 1, "alpha", 1), get_base1(beta, 1, "beta", 1))) + beta_log(get_base1(pvalues, j, "pvalues", 1), 1, 1)), 
                                "assigning variable temp");
                    current_statement_begin__ = 28;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(pi_array, 3, "pi_array", 1)) + beta_log(get_base1(pvalues, i, "pvalues", 1), 1, 1)) + beta_log(get_base1(pvalues, j, "pvalues", 1), get_base1(alpha, 2, "alpha", 1), get_base1(beta, 2, "beta", 1))), 
                                "assigning variable temp");
                    current_statement_begin__ = 29;
                    stan::model::assign(temp, 
                                stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                                ((stan::math::log(get_base1(pi_array, 4, "pi_array", 1)) + beta_log(get_base1(pvalues, i, "pvalues", 1), get_base1(alpha, 1, "alpha", 1), get_base1(beta, 1, "beta", 1))) + beta_log(get_base1(pvalues, j, "pvalues", 1), get_base1(alpha, 2, "alpha", 1), get_base1(beta, 2, "beta", 1))), 
                                "assigning variable temp");
                    current_statement_begin__ = 30;
                    stan::model::assign(summands, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(weights, i, j, "weights", 1) * log_sum_exp(temp)), 
                                "assigning variable summands");
                    }
                }
            }
            current_statement_begin__ = 33;
            lp_accum__.add(sum(summands));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("pi_array");
        names__.push_back("alpha");
        names__.push_back("beta_minus_one");
        names__.push_back("beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((beta_fixed ? 0 : 2 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_pi2_hist_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> pi_array = in__.simplex_constrain(4);
        size_t pi_array_j_1_max__ = 4;
        for (size_t j_1__ = 0; j_1__ < pi_array_j_1_max__; ++j_1__) {
            vars__.push_back(pi_array(j_1__));
        }

        std::vector<double> alpha;
        size_t alpha_d_0_max__ = 2;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t alpha_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        std::vector<double> beta_minus_one;
        size_t beta_minus_one_d_0_max__ = (beta_fixed ? 0 : 2 );
        beta_minus_one.reserve(beta_minus_one_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < beta_minus_one_d_0_max__; ++d_0__) {
            beta_minus_one.push_back(in__.scalar_lb_constrain(0));
        }
        size_t beta_minus_one_k_0_max__ = (beta_fixed ? 0 : 2 );
        for (size_t k_0__ = 0; k_0__ < beta_minus_one_k_0_max__; ++k_0__) {
            vars__.push_back(beta_minus_one[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 15;
            validate_non_negative_index("beta", "2", 2);
            std::vector<double> beta(2, double(0));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 16;
            for (int i = 1; i <= 2; ++i) {
                current_statement_begin__ = 17;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (beta_fixed ? stan::math::promote_scalar<local_scalar_t__>(1.0) : stan::math::promote_scalar<local_scalar_t__>((get_base1(beta_minus_one, i, "beta_minus_one", 1) + 1.0)) ), 
                            "assigning variable beta");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_k_0_max__ = 2;
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    vars__.push_back(beta[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_pi2_hist";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_array_j_1_max__ = 4;
        for (size_t j_1__ = 0; j_1__ < pi_array_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi_array" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_minus_one_k_0_max__ = (beta_fixed ? 0 : 2 );
        for (size_t k_0__ = 0; k_0__ < beta_minus_one_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_minus_one" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t pi_array_j_1_max__ = (4 - 1);
        for (size_t j_1__ = 0; j_1__ < pi_array_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pi_array" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_minus_one_k_0_max__ = (beta_fixed ? 0 : 2 );
        for (size_t k_0__ = 0; k_0__ < beta_minus_one_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_minus_one" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_pi2_hist_namespace::model_pi2_hist stan_model;


#endif
